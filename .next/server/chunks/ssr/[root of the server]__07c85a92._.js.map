{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/refine-image-prompt.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Refines an image prompt using AI to produce higher quality and more relevant results.\n *\n * - refineImagePrompt - A function that refines the image prompt.\n * - RefineImagePromptInput - The input type for the refineImagePrompt function.\n * - RefineImagePromptOutput - The return type for the refineImagePrompt function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst RefineImagePromptInputSchema = z.object({\n  prompt: z.string().describe('The original image prompt provided by the user.'),\n});\nexport type RefineImagePromptInput = z.infer<typeof RefineImagePromptInputSchema>;\n\nconst RefineImagePromptOutputSchema = z.object({\n  refinedPrompt: z.string().describe('The refined image prompt generated by the AI.'),\n});\nexport type RefineImagePromptOutput = z.infer<typeof RefineImagePromptOutputSchema>;\n\nexport async function refineImagePrompt(input: RefineImagePromptInput): Promise<RefineImagePromptOutput> {\n  return refineImagePromptFlow(input);\n}\n\nconst refineImagePromptPrompt = ai.definePrompt({\n  name: 'refineImagePromptPrompt',\n  input: {schema: RefineImagePromptInputSchema},\n  output: {schema: RefineImagePromptOutputSchema},\n  prompt: `You are an AI image prompt refiner. Your job is to take a user-provided image prompt and refine it to produce higher quality and more relevant results. The refined prompt should be more descriptive and specific than the original prompt.\n\nOriginal Prompt: {{{prompt}}}\n\nRefined Prompt:`, // Ensure the AI only outputs the refined prompt\n});\n\nconst refineImagePromptFlow = ai.defineFlow(\n  {\n    name: 'refineImagePromptFlow',\n    inputSchema: RefineImagePromptInputSchema,\n    outputSchema: RefineImagePromptOutputSchema,\n  },\n  async input => {\n    const {output} = await refineImagePromptPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,+BAA+B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC5C,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC9B;AAGA,MAAM,gCAAgC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7C,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACrC;AAGO,eAAe,uCAAe,GAAf,kBAAkB,KAA6B;IACnE,OAAO,sBAAsB;AAC/B;AAEA,MAAM,0BAA0B,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC9C,MAAM;IACN,OAAO;QAAC,QAAQ;IAA4B;IAC5C,QAAQ;QAAC,QAAQ;IAA6B;IAC9C,QAAQ,CAAC;;;;eAII,CAAC;AAChB;AAEA,MAAM,wBAAwB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACzC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,wBAAwB;IAC/C,OAAO;AACT;;;IAxBoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 297, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/propose-image-variations.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Image variations proposal flow.\n *\n * This file defines a Genkit flow that takes a text prompt and generates\n * multiple image variations with different aspect ratios and resolutions.\n *\n * @remarks\n * - proposeImageVariations - A function that handles the image variations proposal process.\n * - ProposeImageVariationsInput - The input type for the proposeImageVariations function.\n * - ProposeImageVariationsOutput - The return type for the proposeImageVariations function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst ProposeImageVariationsInputSchema = z.object({\n  prompt: z.string().describe('The text prompt to use for generating image variations.'),\n});\nexport type ProposeImageVariationsInput = z.infer<typeof ProposeImageVariationsInputSchema>;\n\nconst ImageVariationSchema = z.object({\n  url: z.string().describe('The data URI of the generated image.'),\n  aspectRatio: z.string().describe('The aspect ratio of the generated image (e.g., \"16:9\").'),\n  resolution: z.string().describe('The resolution of the generated image (e.g., \"1920x1080\").'),\n});\n\nconst ProposeImageVariationsOutputSchema = z.array(ImageVariationSchema).describe('An array of image variations.');\nexport type ProposeImageVariationsOutput = z.infer<typeof ProposeImageVariationsOutputSchema>;\n\nexport async function proposeImageVariations(input: ProposeImageVariationsInput): Promise<ProposeImageVariationsOutput> {\n  return proposeImageVariationsFlow(input);\n}\n\nconst proposeImageVariationsFlow = ai.defineFlow(\n  {\n    name: 'proposeImageVariationsFlow',\n    inputSchema: ProposeImageVariationsInputSchema,\n    outputSchema: ProposeImageVariationsOutputSchema,\n  },\n  async input => {\n    const variations = await Promise.all([\n      generateImageVariation(input.prompt, '1:1', '512x512'),\n      generateImageVariation(input.prompt, '16:9', '1920x1080'),\n      generateImageVariation(input.prompt, '9:16', '1080x1920'),\n    ]);\n\n    return variations;\n  }\n);\n\nasync function generateImageVariation(\n  prompt: string,\n  aspectRatio: string,\n  resolution: string\n): Promise<{url: string; aspectRatio: string; resolution: string}> {\n  const {media} = await ai.generate({\n    model: 'googleai/gemini-2.0-flash-exp',\n    prompt: prompt,\n    config: {\n      responseModalities: ['TEXT', 'IMAGE'],\n    },\n  });\n\n  return {url: media.url, aspectRatio, resolution};\n}\n"],"names":[],"mappings":";;;;;AAEA;;;;;;;;;;CAUC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,oCAAoC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjD,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC9B;AAGA,MAAM,uBAAuB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpC,KAAK,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACzB,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAClC;AAEA,MAAM,qCAAqC,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,sBAAsB,QAAQ,CAAC;AAG3E,eAAe,uCAAoB,GAApB,uBAAuB,KAAkC;IAC7E,OAAO,2BAA2B;AACpC;AAEA,MAAM,6BAA6B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC9C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,aAAa,MAAM,QAAQ,GAAG,CAAC;QACnC,uBAAuB,MAAM,MAAM,EAAE,OAAO;QAC5C,uBAAuB,MAAM,MAAM,EAAE,QAAQ;QAC7C,uBAAuB,MAAM,MAAM,EAAE,QAAQ;KAC9C;IAED,OAAO;AACT;AAGF,eAAe,uBACb,MAAc,EACd,WAAmB,EACnB,UAAkB;IAElB,MAAM,EAAC,KAAK,EAAC,GAAG,MAAM,mHAAA,CAAA,KAAE,CAAC,QAAQ,CAAC;QAChC,OAAO;QACP,QAAQ;QACR,QAAQ;YACN,oBAAoB;gBAAC;gBAAQ;aAAQ;QACvC;IACF;IAEA,OAAO;QAAC,KAAK,MAAM,GAAG;QAAE;QAAa;IAAU;AACjD;;;IAnCsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 372, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["\n\"use server\";\n\nimport { refineImagePrompt as refineImagePromptAI, type RefineImagePromptInput, type RefineImagePromptOutput } from \"@/ai/flows/refine-image-prompt\";\nimport { proposeImageVariations as proposeImageVariationsAI, type ProposeImageVariationsInput, type ProposeImageVariationsOutput } from \"@/ai/flows/propose-image-variations\";\n\nexport async function refinePromptAction(input: RefineImagePromptInput): Promise<RefineImagePromptOutput> {\n  try {\n    const result = await refineImagePromptAI(input);\n    return result;\n  } catch (error) {\n    console.error(\"Error refining prompt:\", error);\n    // It's good practice to not expose raw error messages to the client\n    // For a production app, you might log the error and return a generic message\n    if (error instanceof Error) {\n      throw new Error(`Failed to refine prompt: ${error.message}`);\n    }\n    throw new Error(\"An unknown error occurred while refining the prompt.\");\n  }\n}\n\nexport async function proposeImageVariationsAction(input: ProposeImageVariationsInput): Promise<ProposeImageVariationsOutput> {\n  try {\n    const result = await proposeImageVariationsAI(input);\n    return result;\n  } catch (error) {\n    console.error(\"Error proposing image variations:\", error);\n    if (error instanceof Error) {\n      throw new Error(`Failed to propose image variations: ${error.message}`);\n    }\n    throw new Error(\"An unknown error occurred while proposing image variations.\");\n  }\n}\n"],"names":[],"mappings":";;;;;;AAGA;AACA;;;;;;AAEO,eAAe,uCAAgB,GAAhB,mBAAmB,KAA6B;IACpE,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,+IAAA,CAAA,oBAAmB,AAAD,EAAE;QACzC,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,oEAAoE;QACpE,6EAA6E;QAC7E,IAAI,iBAAiB,OAAO;YAC1B,MAAM,IAAI,MAAM,CAAC,yBAAyB,EAAE,MAAM,OAAO,EAAE;QAC7D;QACA,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,eAAe,uCAA0B,GAA1B,6BAA6B,KAAkC;IACnF,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,oJAAA,CAAA,yBAAwB,AAAD,EAAE;QAC9C,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;QACnD,IAAI,iBAAiB,OAAO;YAC1B,MAAM,IAAI,MAAM,CAAC,oCAAoC,EAAE,MAAM,OAAO,EAAE;QACxE;QACA,MAAM,IAAI,MAAM;IAClB;AACF;;;IA1BsB;IAeA;;AAfA,+OAAA;AAeA,+OAAA","debugId":null}},
    {"offset": {"line": 424, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 478, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/image-generator-client.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const ImageGeneratorClient = registerClientReference(\n    function() { throw new Error(\"Attempted to call ImageGeneratorClient() from the server but ImageGeneratorClient is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/image-generator-client.tsx <module evaluation>\",\n    \"ImageGeneratorClient\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,uBAAuB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtD;IAAa,MAAM,IAAI,MAAM;AAAwP,GACrR,2EACA","debugId":null}},
    {"offset": {"line": 492, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/image-generator-client.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const ImageGeneratorClient = registerClientReference(\n    function() { throw new Error(\"Attempted to call ImageGeneratorClient() from the server but ImageGeneratorClient is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/image-generator-client.tsx\",\n    \"ImageGeneratorClient\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,uBAAuB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtD;IAAa,MAAM,IAAI,MAAM;AAAwP,GACrR,uDACA","debugId":null}},
    {"offset": {"line": 506, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 516, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx"],"sourcesContent":["\nimport { ImageGeneratorClient } from '@/components/image-generator-client';\n\nexport default function HomePage() {\n  return <ImageGeneratorClient />;\n}\n"],"names":[],"mappings":";;;;AACA;;;AAEe,SAAS;IACtB,qBAAO,8OAAC,kJAAA,CAAA,uBAAoB;;;;;AAC9B","debugId":null}}]
}